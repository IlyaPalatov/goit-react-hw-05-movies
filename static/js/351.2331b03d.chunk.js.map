{"version":3,"file":"static/js/351.2331b03d.chunk.js","mappings":"sSAIMA,E,OAAMC,EAAAA,OAAa,CACvBC,QAAS,gCACTC,OAAQ,CACNC,QALY,sCASHC,EAAiB,mCAAG,6GAENL,EAAIM,IAAI,wBAFF,cAEvBC,EAFuB,yBAGtBA,EAASC,KAAKC,SAHQ,sCAKvB,IAAIC,MAAM,mCAAqC,KAAMC,SAL9B,yDAAH,qDASjBC,EAAY,mCAAG,WAAOC,GAAP,gGAEDb,EAAIM,IAAI,gBAAiB,CAC9CH,OAAQ,CACNW,MAAOD,KAJa,cAElBN,EAFkB,yBAOjBA,EAASC,KAAKC,SAPG,sCASlB,IAAIC,MAAM,2BAA6B,KAAMC,SAT3B,yDAAH,sDAaZI,EAAe,mCAAG,WAAOC,GAAP,gGAEJhB,EAAIM,IAAJ,iBAAkBU,IAFd,cAErBT,EAFqB,yBAGpBA,EAASC,MAHW,sCAKrB,IAAIE,MAAM,iCAAmC,KAAMC,SAL9B,yDAAH,sDASfM,EAAe,mCAAG,WAAOD,GAAP,gGAEJhB,EAAIM,IAAJ,iBAAkBU,EAAlB,aAFI,cAErBT,EAFqB,yBAGpBA,EAASC,KAAKU,MAHM,sCAKrB,IAAIR,MAAM,iCAAmC,KAAMC,SAL9B,yDAAH,sDASfQ,EAAe,mCAAG,WAAOH,GAAP,gGAEJhB,EAAIM,IAAJ,iBAAkBU,EAAlB,aAFI,cAErBT,EAFqB,yBAGpBA,EAASC,KAAKC,SAHM,sCAKrB,IAAIC,MAAM,iCAAmC,KAAMC,SAL9B,yDAAH,qD,wGCK5B,UApDe,WACb,OAAoCS,EAAAA,EAAAA,UAAS,IAA7C,eAAOP,EAAP,KAAmBQ,EAAnB,KACA,GAA0CD,EAAAA,EAAAA,UAAS,IAAnD,eAAOE,EAAP,KAAsBC,EAAtB,KAEA,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KAEMC,GAAYC,EAAAA,EAAAA,aAAW,mCAAC,WAAOd,GAAP,iGAELF,EAAAA,EAAAA,IAAaE,GAFR,OAEpBe,EAFoB,OAG1BN,EAAiBM,GAHS,gDAK1BC,QAAQC,MAAM,0BAAd,MAL0B,yDAAD,sDAO1B,KAEHC,EAAAA,EAAAA,YAAU,WACR,IAAMlB,EAAQW,EAAanB,IAAI,SAC3BQ,IACFO,EAAcP,GACda,EAAUb,GAEb,GAAE,CAACW,EAAcE,IAMlB,OACE,4BACE,2CACA,kBACEM,KAAK,OACLC,MAAOrB,EACPsB,SAAU,SAACC,GAAD,OAAOf,EAAce,EAAEC,OAAOH,MAA9B,KAEZ,mBAAQI,QAAS,WAXnBZ,EAAgB,CAAEZ,MAW8BD,GAA7B,EAAjB,oBACCS,EAAciB,OAAS,IACtB,4BACE,4CACA,wBACGjB,EAAckB,KAAI,SAACC,GAAD,OACjB,yBACE,SAAC,KAAD,CAAMC,GAAE,kBAAaD,EAAME,IAA3B,SAAkCF,EAAMG,SADjCH,EAAME,GADE,WAU9B,C","sources":["components/Api.jsx","components/Routes/Movies.jsx"],"sourcesContent":["import axios from 'axios';\n\nconst API_KEY = '972977f56f8bd7231d09e6b66c83a88b'; \n\nconst api = axios.create({\n  baseURL: 'https://api.themoviedb.org/3/',\n  params: {\n    api_key: API_KEY,\n  },\n});\n\nexport const getTrendingMovies = async () => {\n  try {\n    const response = await api.get('/trending/movie/week'); \n    return response.data.results;\n  } catch (error) {\n    throw new Error('Error fetching trending movies: ' + error.message);\n  }\n};\n\nexport const searchMovies = async (searchTerm) => {\n  try {\n    const response = await api.get('/search/movie', {\n      params: {\n        query: searchTerm,\n      },\n    });\n    return response.data.results;\n  } catch (error) {\n    throw new Error('Error searching movies: ' + error.message);\n  }\n};\n\nexport const getMovieDetails = async (movieId) => {\n  try {\n    const response = await api.get(`/movie/${movieId}`);\n    return response.data;\n  } catch (error) {\n    throw new Error('Error fetching movie details: ' + error.message);\n  }\n};\n\nexport const getMovieCredits = async (movieId) => {\n  try {\n    const response = await api.get(`/movie/${movieId}/credits`);\n    return response.data.cast;\n  } catch (error) {\n    throw new Error('Error fetching movie credits: ' + error.message);\n  }\n};\n\nexport const getMovieReviews = async (movieId) => {\n  try {\n    const response = await api.get(`/movie/${movieId}/reviews`);\n    return response.data.results;\n  } catch (error) {\n    throw new Error('Error fetching movie reviews: ' + error.message);\n  }\n};\n","import React, { useState, useEffect, useCallback } from 'react';\nimport { Link, useSearchParams } from 'react-router-dom';\nimport { searchMovies } from '../Api';\n\nconst Movies = () => {\n  const [searchTerm, setSearchTerm] = useState('');\n  const [searchResults, setSearchResults] = useState([]);\n\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  const fetchData = useCallback(async (query) => {\n    try {\n      const movies = await searchMovies(query);\n      setSearchResults(movies);\n    } catch (error) {\n      console.error('Error searching movies:', error);\n    }\n  }, []);\n\n  useEffect(() => {\n    const query = searchParams.get('query');\n    if (query) {\n      setSearchTerm(query);\n      fetchData(query);\n    }\n  }, [searchParams, fetchData]);\n\n  const handleSubmitSearchTerm = (query) => {\n    setSearchParams({ query: query });\n  };\n\n  return (\n    <div>\n      <h1>Search Movies</h1>\n      <input\n        type=\"text\"\n        value={searchTerm}\n        onChange={(e) => setSearchTerm(e.target.value)}\n      />\n      <button onClick={() => handleSubmitSearchTerm(searchTerm)}>Search</button>\n      {searchResults.length > 0 && (\n        <div>\n          <h2>Search Results</h2>\n          <ul>\n            {searchResults.map((movie) => (\n              <li key={movie.id}>\n                <Link to={`/movies/${movie.id}`}>{movie.title}</Link>\n              </li>\n            ))}\n          </ul>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Movies;\n"],"names":["api","axios","baseURL","params","api_key","getTrendingMovies","get","response","data","results","Error","message","searchMovies","searchTerm","query","getMovieDetails","movieId","getMovieCredits","cast","getMovieReviews","useState","setSearchTerm","searchResults","setSearchResults","useSearchParams","searchParams","setSearchParams","fetchData","useCallback","movies","console","error","useEffect","type","value","onChange","e","target","onClick","length","map","movie","to","id","title"],"sourceRoot":""}